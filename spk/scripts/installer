#!/bin/sh

# Package
PACKAGE="virtualbox4dsm"

# some variables
INSTALL_DIR="/usr/local/${PACKAGE}"
PACKAGE_DIR="/var/packages/${PACKAGE}"
CONFIG="${PACKAGE_DIR}/target/etc/vbox4dsm.config"
VBOX_USER=root
USER=${USER}

# get dynamic stuff
VOL_PATH=$(servicetool --get-alive-volume)

# get kernel version and remove plus in kernel version if any
KERNEL=$(uname -a | awk '{print $3}')
KERNEL=${KERNEL//+}

KERNEL_BUILD_VER=$(get_key_value ${CONFIG} KVER)
if [[ "${KERNEL_BUILD_VER}" == "" ]]; then
	KERNEL_BUILD_VER=3.10.5
fi

DIST=$(uname -a | awk '{print $14}')


preinst ()
{
	# at this point in instalation package.tgz is not extracted
	if [ -f ${SYNOPKG_PKGINST_TEMP_DIR}/etc/vbox4dsm.config ]; then
		KERNEL_BUILD_VER=$(get_key_value ${SYNOPKG_PKGINST_TEMP_DIR}/etc/vbox4dsm.config KVER)
	else
		echo "No ${SYNOPKG_PKGINST_TEMP_DIR}/etc/vbox4dsm.config"
	fi
	
	if [[ "${KERNEL_BUILD_VER}" == "" ]]; then
		KERNEL_BUILD_VER=3.10
	fi

	# check for supported kernel
	if [[ "${KERNEL}" != "${KERNEL_BUILD_VER}" ]]; then
		echo "Kernel '${KERNEL}' is not supported, supporting only '${KERNEL_BUILD_VER}'"
		exit 1
	fi

	exit 0
}

postinst ()
{
	# wizard variables
	VBOX_HTTPS=$([ "${wizard_use_https}" == "true" ] && echo "true" || echo "false")
	VBOX_ACTION="acpibutton"
	VBOX_ACTION=$([ "${wizard_on_stop_poweroff}" == "true" ] && echo "poweroff" || echo $VBOX_ACTION)
	VBOX_ACTION=$([ "${wizard_on_stop_acpibutton}" == "true" ] && echo "acpibutton" || echo $VBOX_ACTION)
	VBOX_ACTION=$([ "${wizard_on_stop_savestate}" == "true" ] && echo "savestate" || echo $VBOX_ACTION)
	SHARE_NAME="${wizard_virtualbox_share}"
	WEBSVC_BIND="${wizard_bind_ip}"
	WEBSVC_PASS="${wizard_use_vboxwebsvc_pass}"
	WEBSVC_PROTOCOL=$([ "${VBOX_HTTPS}" == "true" ] && echo "https" || echo "http")
	WOL_SVC=$([ "${wizard_enable_wol}" == "true" ]  && echo "true" || echo "false")

	# save config
	touch ${CONFIG}
	set_key_value ${CONFIG} wizard_on_stop_poweroff ${wizard_on_stop_poweroff}
	set_key_value ${CONFIG} wizard_on_stop_acpibutton ${wizard_on_stop_acpibutton}
	set_key_value ${CONFIG} wizard_on_stop_savestate ${wizard_on_stop_savestate}
	set_key_value ${CONFIG} wizard_virtualbox_share ${wizard_virtualbox_share}
	set_key_value ${CONFIG} wizard_bind_ip ${wizard_bind_ip}
	set_key_value ${CONFIG} wizard_use_https ${wizard_use_https}
	set_key_value ${CONFIG} wizard_enable_wol ${wizard_enable_wol}
	
	#create shared folder if needed
	synoshare --get ${SHARE_NAME} > /dev/null 2>&1
	if [ $? -ne 0 ]
	then
 		echo "Shared folder '${SHARE_NAME}' doesn't exist"
		exit 1
	fi

	# lets create link to share path
	SHARE_PATH=$(synoshare --get virtualbox | grep 'Path' | cut -d[ -f2 | cut -d] -f1)
	ln -sf ${SHARE_PATH} "${PACKAGE_DIR}/target/share"
	set_key_value ${CONFIG} SHARE_PATH ${SHARE_PATH}

	if [ ! -d ${SHARE_PATH} ]; then
		echo "Share folder '${SHARE_PATH}' doesn't exist!"
		exit 1
	fi

	# Link package dir to install dir
	ln -s ${SYNOPKG_PKGDEST} ${INSTALL_DIR}

	# Install vbox to /opt/VirtualBox
	[ ! -d /opt ] && mkdir /opt
	cp -pR "${INSTALL_DIR}/opt/VirtualBox" /opt/VirtualBox

	if [ $? -ne 0 ]; then
		echo "Unable to install virtualbox to /opt/VirtualBox"
		exit 1
	fi
	
	# ensure SUID root
	chmod 4711 /opt/VirtualBox/VBoxHeadless

	# check for libs
	if [ ! -f "/lib/libz.so.1.2.8" ]; then
		cp "${PACKAGE_DIR}"/target/lib/libz.so.1.2.8 /lib/
	fi
	
	if [ ! -f "/lib64/libz.so.1.2.8" ]; then
		cp "${PACKAGE_DIR}"/target/lib64/libz.so.1.2.8 /lib64/
	fi

	# create symlinks for libs
	[ ! -L "/lib/libz.so" ] && ln -s /lib/libz.so.1.2.8 /lib/libz.so
	[ ! -L "/lib/libz.so.1" ] && ln -s /lib/libz.so.1.2.8 /lib/libz.so.1
	[ ! -L "/lib64/libz.so" ] && ln -s /lib64/libz.so.1.2.8 /lib64/libz.so
	[ ! -L "/lib64/libz.so.1" ] && ln -s /lib64/libz.so.1.2.8 /lib64/libz.so.1

	# create udev rules for usb
	[ -d /lib/udev/rules.d ] && cp "${PACKAGE_DIR}"/target/etc/50-virtualbox.rules /lib/udev/rules.d/ && udevadm control --reload
	
	# Create a default configuration file for VirtualBox
	if [ ! -d "/etc/vbox" ]; then
		cp -rf "${INSTALL_DIR}"/etc/vbox /etc/
		sed -i -e "s|acpibutton|${VBOX_ACTION}|g" /etc/vbox/vbox.cfg
		sed -i -e "s|root|${VBOX_USER}|g" /etc/vbox/vbox.cfg
		sed -i -e "s|/var/log/vbox.log|${VOL_PATH}/${SHARE_NAME}/vbox.log|g" /etc/vbox/vbox.cfg
		sed -i -e "s|127.0.0.1|${WEBSVC_BIND}|g" /etc/vbox/vbox.cfg
		if [ "${WEBSVC_BIND}" != "127.0.0.1" ]; then
			sed -i -e "s|VBOXWEB_AUTH_LIBRARY=null|VBOXWEB_AUTH_LIBRARY='VBoxAuthSimple'|g" /etc/vbox/vbox.cfg
			PWHASH=$(/opt/VirtualBox/VBoxManage internalcommands passwordhash "${WEBSVC_PASS}" | cut -d ' '  -f 3)
			echo "VBOXWEB_AUTH_PWHASH='${PWHASH}'" >>  /etc/vbox/vbox.cfg
		fi
		if [ "${VBOX_HTTPS}" == "true" ]; then
			if [ -f /usr/syno/etc/certificate/system/default/cert.pem ]; then
				cat /usr/syno/etc/certificate/system/default/cert.pem > /etc/vbox/server.pem
				cat /usr/syno/etc/certificate/system/default/privkey.pem >> /etc/vbox/server.pem
			else 
				openssl req -subj '/CN=${WEBSVC_BIND}/O=VirtualBox/C=US' -new -newkey rsa:2048 -sha256 -days 365 -nodes -x509 -keyout server.key -out server.crt
				cat cert.pem > /etc/vbox/server.pem
				cat privkey.pem >> /etc/vbox/server.pem
				rm cert.pem privkey.pem
			fi

			echo "VBOXWEB_SSL_KEYFILE='/etc/vbox/server.pem'" >>  /etc/vbox/vbox.cfg
		fi
	fi

	# should enable WOL deamon
	if [ "${WOL_SVC}" == "true" ]; then
		touch ${PACKAGE_DIR}/enabled_wol
		
		# if bind to all fix url
		if [ "${WEBSVC_BIND}" == "0.0.0.0" ]; then
		  WEBSVC_URL="${WEBSVC_PROTOCOL}://127.0.0.1:18083"
		else
		  WEBSVC_URL="${WEBSVC_PROTOCOL}://${WEBSVC_BIND}:18083"
		fi
		
		sed -i -e "s|@url@|${WEBSVC_URL}|g" "/etc/vbox/vboxwolservice.ini"			
		
		PWHASH=$("${PACKAGE_DIR}/target/wol/vboxwebclient.py" --hash ${WEBSVC_PASS})
		sed -i -e "s|@pwhash@|${PWHASH:=}|g" "/etc/vbox/vboxwolservice.ini"
	else
		[ -f ${PACKAGE_DIR}/enabled_wol ] && rm -f ${PACKAGE_DIR}/enabled_wol
	fi
		

	# set default vm machine folder to share
	# set default vm machine folder to ${VOL_PATH}/${SHARE_NAME}"
	/opt/VirtualBox/VBoxManage setproperty machinefolder ${VOL_PATH}/${SHARE_NAME}

	# move additions iso to share
	if [ -d /opt/VirtualBox/additions ]; then
		cp -r /opt/VirtualBox/additions ${VOL_PATH}/${SHARE_NAME}
	fi
	
	exit 0
}

preuninst ()
{
	if [ "UNINSTALL" = "$SYNOPKG_PKG_STATUS" ]; then
		# remove service configure file when uninstalling the package
		#/usr/syno/bin/servicetool --remove-configure-file --package virtualbox.sc

		# stop service
		"${PACKAGE_DIR}/scripts/start-stop-status" stop		
	fi

    exit 0
}

postuninst ()
{
	# Remove link
	rm -f ${INSTALL_DIR}

	if [ -d /etc/vbox ]; then
		rm -fr /etc/vbox
	fi

	# Remove vbox
	if [ -d /opt/VirtualBox ]; then
		rm -fr /opt/VirtualBox
		if [ ! "$(ls -A /opt)" ]; then
			rmdir /opt
		fi
	fi

	# remove udev rules
	[ -f /lib/udev/rules.d/50-virtualbox.rules ] && rm /lib/udev/rules.d/50-virtualbox.rules && udevadm control --reload

	# remove configuration (old one should be in share)
	rm -rf /root/.config/VirtualBox
	
    exit 0
}


preupgrade ()
{
	# stop service
	"${PACKAGE_DIR}/scripts/start-stop-status" stop

	# Save some stuff
	[ -d ${TMP_DIR}/${PACKAGE} ] && rm -fr ${TMP_DIR}/${PACKAGE}
	mkdir -p ${TMP_DIR}/${PACKAGE}

	[ -f /etc/vbox/vbox.cfg ] && mv /etc/vbox/vbox.cfg ${TMP_DIR}/${PACKAGE}/
	[ -f /etc/vbox/vboxwolservice.ini ] && mv /etc/vbox/vboxwolservice.ini ${TMP_DIR}/${PACKAGE}/
	[ -f CONFIG ] && cp CONFIG ${TMP_DIR}/${PACKAGE}/
	[ -d ${PACKAGE_DIR}/target/share/.config/VirtualBox ] && cp -rf ${PACKAGE_DIR}/target/share/.config/VirtualBox ${TMP_DIR}/${PACKAGE}/ 
	
	exit 0
}

postupgrade ()
{
	# Restore some stuff
	[ -f ${TMP_DIR}/${PACKAGE}/vbox.cfg ] && mv ${TMP_DIR}/${PACKAGE}/vbox.cfg /etc/vbox/vbox.cfg
	[ -f ${TMP_DIR}/${PACKAGE}/vboxwolservice.ini ] && mv ${TMP_DIR}/${PACKAGE}/vboxwolservice.ini /etc/vbox/vboxwolservice.ini

	if [ -d ${TMP_DIR}/${PACKAGE}/VirtualBox ]; then
		[ ! -d ${HOME}/.config ] && mkdir -p ${HOME}/.config
		cp -rf ${TMP_DIR}/${PACKAGE}/VirtualBox ${HOME}/.config
	fi 

	rm -fr ${TMP_DIR}/${PACKAGE}
	
	# start service
	"${PACKAGE_DIR}/scripts/start-stop-status" start

	exit 0
}

# get_key_value is in bin dir i.e. "get_key_value xfile key"
set_key_value() {
	xfile="$1"
	param="$2"
	value="$3"
	grep -q "${param}" ${xfile} && \
		/bin/sed -i "s/^${param}.*/${param}=\"${value}\"/" ${xfile} || \
		echo "${param}=\"${value}\"" >> ${xfile}
}

